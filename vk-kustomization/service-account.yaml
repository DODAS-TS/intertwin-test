apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-kubeconfig
data:
  prepare_kubeconfig.sh: |
    #!/bin/bash
    SERVICE_ACCOUNT=knoc
    USER_TOKEN_NAME=$(kubectl -n knoc get serviceaccount ${SERVICE_ACCOUNT} -o=jsonpath='{.secrets[0].name}')
    USER_TOKEN_VALUE=$(kubectl -n knoc get secret/${USER_TOKEN_NAME} -o=go-template='{{ "{{.data.token}}" }}' | base64 --decode)
    # CURRENT_CONTEXT=$(kubectl config current-context)
    CURRENT_CONTEXT=$KUBE_CURRENT_CONTEXT
    CLUSTER_CA=`kubectl get secret/$USER_TOKEN_NAME -n knoc -o jsonpath='{.data.ca\.crt}'`
    CLUSTER_SERVER=https://131.154.96.26:6443
    echo "
    apiVersion: v1
    kind: Config
    current-context: ${CURRENT_CONTEXT}
    contexts:
    - name: ${CURRENT_CONTEXT}
      context:
        cluster: ${CURRENT_CONTEXT}
        user: default
        namespace: {{ .Release.Namespace }}
    clusters:
    - name: ${CURRENT_CONTEXT}
      cluster:
        certificate-authority-data: ${CLUSTER_CA}
        server: ${CLUSTER_SERVER}
    users:
    - name: default
      user:
        token: ${USER_TOKEN_VALUE}
    "

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: knoc
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: knoc-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  - services
  - serviceaccounts
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - delete
  - get
  - list
  - watch
  - patch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: knoc-rolebinding
subjects:
- kind: ServiceAccount
  name: knoc
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: knoc-role

